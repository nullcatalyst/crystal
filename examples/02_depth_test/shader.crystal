namespace examples::depth_test;

struct Uniform {
    mat4 projection_matrix;
    mat4 rotation_matrix;
    mat4 orbit_matrix;
}

struct Vertex {
    vec4 position : 0;
    vec4 normal   : 1;
}

struct Instance {
    vec4 offset : 2;
    vec4 color  : 3;
}

struct Varyings {
    vec4 position : 0;
    vec4 color    : 1;
}

struct Out {
    vec4 color : 0;
}

pipeline cube {
    // Disable culling to force depth testing to do some work.
    cull = "back";
    winding = "ccw";
    depth_test = "less";
    depth_write = true;

    uniform Uniform u : 2;

    vertex (
        Vertex in : 0,
        Instance inst : instanced 1,
    ) -> Varyings {
        Varyings out;
        out.position = u.projection_matrix * (u.rotation_matrix * in.position + u.orbit_matrix * inst.offset);
        out.color    = inst.color * (0.25 + 0.75 * dot((u.rotation_matrix * in.normal).xyz, vec3(0.0, 0.0, 1.0)));
        return out;
    }

    fragment (Varyings in) -> Out {
        Out out;
        out.color = in.color;
        return out;
    }
}
